"""DGN baseline model to predict a graph."""

from torch.nn import Linear, Module, ReLU, Sequential
from torch_geometric.data import Batch as PygBatch
from torch_geometric.data import Data as PygData
from torch_geometric.nn import NNConv
from torch_geometric.nn import Sequential as PygSequential

from avicortex.networks.utils import construct_graph_from_nodes


class DGNPredictor(Module):
    """GNN to predict a graph."""

    def __init__(
        self,
        n_views: int,
        n_nodes: int,
        batch_size: int,
        conv_size: int,
    ) -> None:
        super().__init__()

        self.n_views = n_views
        self.n_nodes = n_nodes
        self.batch_size = batch_size
        self.conv_size = conv_size

        # input-output definitions for PygSequential parameters
        g_in = "x, edge_index, edge_attr"
        g_in_out = "x, edge_index, edge_attr -> x"

        nn = Sequential(Linear(self.n_views, self.n_views * self.conv_size), ReLU())
        self.conv1 = NNConv(self.n_views, self.conv_size, nn, aggr="mean")

        nn = Sequential(Linear(self.n_views, self.conv_size * self.conv_size), ReLU())
        self.conv2 = NNConv(self.conv_size, self.conv_size, nn, aggr="mean")

        nn = Sequential(Linear(self.n_views, self.conv_size * self.n_views), ReLU())
        self.conv3 = NNConv(self.conv_size, self.n_views, nn, aggr="mean")

        self.nnconv_layers = PygSequential(
            g_in,
            [(self.conv1, g_in_out), (self.conv2, g_in_out), (self.conv3, g_in_out)],
        )

    def forward(self, graph: PygData) -> PygData:
        """Forward pass of the model."""
        learned_xs = self.nnconv_layers(
            x=graph.x.flatten(end_dim=-2),
            edge_index=graph.edge_index,
            edge_attr=graph.edge_attr.flatten(end_dim=-2),
        )
        learned_xs = learned_xs.reshape_as(graph.x)
        # iterate over batch here.
        graph_list_for_batch = []
        for idx, x in enumerate(learned_xs):
            sample = graph.get_example(idx)
            reconstructed_graph = construct_graph_from_nodes(
                x, sample.edge_index, sample.y.squeeze(-1)
            )
            graph_list_for_batch.append(reconstructed_graph)
        # Return reconstructed graph at the last step, this should be the final generated graph.
        graph_batch = PygBatch()
        return graph_batch.from_data_list(graph_list_for_batch)
